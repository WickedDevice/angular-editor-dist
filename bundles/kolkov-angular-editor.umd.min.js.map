{"version":3,"sources":["ng://@kolkov/angular-editor/lib/angular-editor.service.ts","ng://@kolkov/angular-editor/lib/config.ts","ng://@kolkov/angular-editor/lib/angular-editor-toolbar.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.component.ts","ng://@kolkov/angular-editor/lib/utils.ts","ng://@kolkov/angular-editor/lib/ae-select/ae-select.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.module.ts"],"names":["AngularEditorService","http","doc","_this","this","saveSelection","getSelection","sel","getRangeAt","rangeCount","savedSelection","selectedText","toString","createRange","document","prototype","executeCommand","command","param","includes","editCmd","cmd","restoreSelection","execCommand","createLink","url","newUrl","insertHtml","insertColor","color","where","setFontName","fontName","setFontSize","fontSize","html","removeAllRanges","addRange","executeInNextQueueIteration","callbackFn","timeout","setTimeout","checkSelection","length","Error","uploadImage","file","uploadData","FormData","append","name","post","uploadUrl","reportProgress","observe","insertImage","imageUrl","setDefaultParagraphSeparator","separator","createCustomClass","customClass","newTag","tagName","tag","class","insertVideo","videoUrl","match","insertYouTubeVideoTag","insertVimeoVideoTag","id","split","thumbnail","sub","get","subscribe","data","thumbnail_url_with_play_button","title","unsubscribe","nextNode","node","hasChildNodes","firstChild","nextSibling","parentNode","getRangeSelectedNodes","range","includePartiallySelectedContainers","startContainer","endNode","endContainer","rangeNodes","push","commonAncestorContainer","unshift","getSelectedNodes","nodes","i","len","apply","replaceWithOwnChildren","el","parent","insertBefore","removeChild","removeSelectedElements","tagNames","tagNamesArray","toLowerCase","forEach","nodeType","indexOf","Injectable","args","providedIn","HttpClient","Inject","DOCUMENT","angularEditorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","sanitize","toolbarPosition","outline","AngularEditorToolbarComponent","r","editorService","htmlMode","linkSelected","block","headings","label","value","fontSizes","customClassId","customClassList","tagMap","BLOCKQUOTE","A","select","buttons","execute","EventEmitter","Object","defineProperty","classes","_customClasses","map","x","Boolean","triggerCommand","emit","triggerButtons","e","result","queryCommandState","elementById","getElementById","addClass","removeClass","triggerBlocks","findIndex","nodeName","found","y","find","undefined","index","Element","className","keys","foreColour","queryCommandValue","replace","backColor","insertUrl","selection","parentElement","parent_1","href","prompt","foreColor","setEditorMode","m","toggleEditorModeButton","onFileChanged","event","target","files","type","HttpResponse","body","fileReset","reader","FileReader","onload","fr","readAsDataURL","myInputFile","nativeElement","setCustomClass","classId","Component","selector","template","Renderer2","Input","Output","ViewChild","static","AngularEditorComponent","sanitizer","cdRef","defaultTabIndex","autoFocus","modeVisual","showPlaceholder","disabled","focused","touched","changed","config","viewMode","blurEvent","focusEvent","tabindex","parsedTabIndex","Number","tabIndex","onFocus","focus","ngOnInit","ngAfterViewInit","textArea","addEventListener","plainPaste","bind","console","log","preventDefault","text","clipboardData","getData","defaultView","deleteContents","insertNode","createTextNode","doInsertHTML","toggleEditorMode","getCustomTags","onContentChange","innerHTML","exec","onTextAreaFocus","stopPropagation","configure","onTextAreaMouseLeave","onTextAreaBlur","onTouched","relatedTarget","classList","contains","onChange","SecurityContext","HTML","togglePlaceholder","registerOnChange","fn","registerOnTouched","writeValue","refreshView","normalizedValue","setProperty","editorWrapper","setDisabledState","isDisabled","div","action","bToSource","oContent","editableElement","createText","oPre","createElement","setStyle","oCode","appendChild","focusInstance","listen","blurInstance","querySelectorAll","innerText","selectNodeContents","editorToolbar","userSelection","a","focusNode","els","getFonts","tags","customClasses","join","ngOnDestroy","encapsulation","ViewEncapsulation","None","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","DomSanitizer","ChangeDetectorRef","Attribute","HostBinding","HostListener","AeSelectComponent","elRef","options","optionId","opened","changeEvent","selectedOption","hasOwnProperty","optionSelect","option","setValue","toggleOpen","onClick","$event","close","selectedEl","labelButton","handleKeyDown","key","_handleArrowDown","_handleArrowUp","_handleSpace","_handleEnter","_handleTab","_handleBackspace","ElementRef","AngularEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpEvent} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass} from './config';\n\nexport interface UploadResponse {\n  imageUrl: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularEditorService {\n\n  savedSelection: Range | null;\n  selectedText: string;\n  uploadUrl: string;\n\n  constructor(\n    private http: HttpClient,\n    @Inject(DOCUMENT) private doc: any\n  ) { }\n\n  /**\n   * Executed command from editor header buttons exclude toggleEditorMode\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string, param: string = null) {\n    const commands = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'pre'];\n    if (commands.includes(command)) {\n      this.editCmd('formatBlock', command);\n      return;\n    }\n    this.editCmd(command, param);\n  }\n\n  editCmd(cmd: string, param: string) {\n    // console.log(`executeCommand: ${command} ${param}`);\n    this.restoreSelection();  // Prevent lost focus issues --JCN\n    // console.log('restoring selection');\n    this.doc.execCommand(cmd, false, param);\n  }\n\n  /**\n   * Create URL link\n   * @param url string from UI prompt\n   */\n  createLink(url: string) {\n    if (!url.includes('http')) {\n      this.editCmd('createlink', url);\n    } else {\n      const newUrl = '<a href=\"' + url + '\" target=\"_blank\">' + this.selectedText + '</a>';\n      this.insertHtml(newUrl);\n    }\n  }\n\n  /**\n   * insert color either font or background\n   *\n   * @param color color to be inserted\n   * @param where where the color has to be inserted either text/background\n   */\n  insertColor(color: string, where: string): void {\n    const restored = this.restoreSelection();\n    if (restored) {\n      if (where === 'textColor') {\n        this.editCmd('foreColor', color);\n      } else {\n        this.editCmd('hiliteColor', color);\n      }\n    }\n  }\n\n  /**\n   * Set font name\n   * @param fontName string\n   */\n  setFontName(fontName: string) {\n    this.editCmd('fontName', fontName);\n  }\n\n  /**\n   * Set font size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string) {\n    this.editCmd('fontSize', fontSize);\n  }\n\n  /**\n   * Create raw HTML\n   * @param html HTML string\n   */\n  insertHtml(html: string): void {\n    this.editCmd('insertHTML', html);\n    // if (!isHTMLInserted) {\n    //   throw new Error('Unable to perform the operation');\n    // }\n  }\n\n  /**\n   * save selection when the editor is focussed out\n   */\n  public saveSelection = (): void => {\n    if (this.doc.getSelection) {\n      const sel = this.doc.getSelection();\n      if (sel.getRangeAt && sel.rangeCount) {\n        this.savedSelection = sel.getRangeAt(0);\n        this.selectedText = sel.toString();\n      }\n    } else if (this.doc.getSelection && this.doc.createRange) {\n      this.savedSelection = document.createRange();\n    } else {\n      this.savedSelection = null;\n    }\n  }\n\n  /**\n   * restore selection when the editor is focused in\n   *\n   * saved selection when the editor is focused out\n   */\n  restoreSelection(): boolean {\n    if (this.savedSelection) {\n      if (this.doc.getSelection) {\n        const sel = this.doc.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(this.savedSelection);\n        return true;\n      } else if (this.doc.getSelection /*&& this.savedSelection.select*/) {\n        // this.savedSelection.select();\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * setTimeout used for execute 'saveSelection' method in next event loop iteration\n   */\n  public executeInNextQueueIteration(callbackFn: (...args: any[]) => any, timeout = 1e2): void {\n    setTimeout(callbackFn, timeout);\n  }\n\n  /** check any selection is made or not */\n  private checkSelection(): any {\n\n    const selectedText = this.savedSelection.toString();\n\n    if (selectedText.length === 0) {\n      throw new Error('No Selection Made');\n    }\n    return true;\n  }\n\n  /**\n   * Upload file to uploadUrl\n   * @param file The file\n   */\n  uploadImage(file: File): Observable<HttpEvent<UploadResponse>> {\n\n    const uploadData: FormData = new FormData();\n\n    uploadData.append('file', file, file.name);\n\n    return this.http.post<UploadResponse>(this.uploadUrl, uploadData, {\n      reportProgress: true,\n      observe: 'events',\n    });\n  }\n\n  /**\n   * Insert image with Url\n   * @param imageUrl The imageUrl.\n   */\n  insertImage(imageUrl: string) {\n    this.executeCommand('insertImage', imageUrl);\n  }\n\n  setDefaultParagraphSeparator(separator: string) {\n    this.editCmd('defaultParagraphSeparator', separator);\n  }\n\n  createCustomClass(customClass: CustomClass) {\n    let newTag = this.selectedText;\n    if (customClass) {\n      const tagName = customClass.tag ? customClass.tag : 'span';\n      newTag = '<' + tagName + ' class=\"' + customClass.class + '\">' + this.selectedText + '</' + tagName + '>';\n    }\n    this.insertHtml(newTag);\n  }\n\n  insertVideo(videoUrl: string) {\n    if (videoUrl.match('www.youtube.com')) {\n      this.insertYouTubeVideoTag(videoUrl);\n    }\n    if (videoUrl.match('vimeo.com')) {\n      this.insertVimeoVideoTag(videoUrl);\n    }\n  }\n\n  private insertYouTubeVideoTag(videoUrl: string): void {\n    const id = videoUrl.split('v=')[1];\n    const imageUrl = `https://img.youtube.com/vi/${id}/0.jpg`;\n    const thumbnail = `\n      <div style='position: relative'>\n        <img style='position: absolute; left:200px; top:140px'\n             src=\"https://img.icons8.com/color/96/000000/youtube-play.png\"/>\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"click to watch\"/>\n        </a>\n      </div>`;\n    this.insertHtml(thumbnail);\n  }\n\n  private insertVimeoVideoTag(videoUrl: string): void {\n    const sub = this.http.get<any>(`https://vimeo.com/api/oembed.json?url=${videoUrl}`).subscribe(data => {\n      const imageUrl = data.thumbnail_url_with_play_button;\n      const thumbnail = `<div>\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"${data.title}\"/>\n        </a>\n      </div>`;\n      this.insertHtml(thumbnail);\n      sub.unsubscribe();\n    });\n  }\n\n  nextNode(node) {\n    if (node.hasChildNodes()) {\n      return node.firstChild;\n    } else {\n      while (node && !node.nextSibling) {\n        node = node.parentNode;\n      }\n      if (!node) {\n        return null;\n      }\n      return node.nextSibling;\n    }\n  }\n\n  getRangeSelectedNodes(range, includePartiallySelectedContainers) {\n    let node = range.startContainer;\n    const endNode = range.endContainer;\n    let rangeNodes = [];\n\n    // Special case for a range that is contained within a single node\n    if (node === endNode) {\n      rangeNodes = [node];\n    } else {\n      // Iterate nodes until we hit the end container\n      while (node && node !== endNode) {\n        rangeNodes.push( node = this.nextNode(node) );\n      }\n\n      // Add partially selected nodes at the start of the range\n      node = range.startContainer;\n      while (node && node !== range.commonAncestorContainer) {\n        rangeNodes.unshift(node);\n        node = node.parentNode;\n      }\n    }\n\n    // Add ancestors of the range container, if required\n    if (includePartiallySelectedContainers) {\n      node = range.commonAncestorContainer;\n      while (node) {\n        rangeNodes.push(node);\n        node = node.parentNode;\n      }\n    }\n\n    return rangeNodes;\n  }\n\n  getSelectedNodes() {\n    const nodes = [];\n    if (this.doc.getSelection) {\n      const sel = this.doc.getSelection();\n      for (let i = 0, len = sel.rangeCount; i < len; ++i) {\n        nodes.push.apply(nodes, this.getRangeSelectedNodes(sel.getRangeAt(i), true));\n      }\n    }\n    return nodes;\n  }\n\n  replaceWithOwnChildren(el) {\n    const parent = el.parentNode;\n    while (el.hasChildNodes()) {\n      parent.insertBefore(el.firstChild, el);\n    }\n    parent.removeChild(el);\n  }\n\n  removeSelectedElements(tagNames) {\n    const tagNamesArray = tagNames.toLowerCase().split(',');\n    this.getSelectedNodes().forEach((node) => {\n      if (node.nodeType === 1 &&\n        tagNamesArray.indexOf(node.tagName.toLowerCase()) > -1) {\n        // Remove the node and replace it with its children\n        this.replaceWithOwnChildren(node);\n      }\n    });\n  }\n}\n","export interface CustomClass {\n  name: string;\n  class: string;\n  tag?: string;\n}\n\nexport interface Font {\n  name: string;\n  class: string;\n}\n\nexport interface AngularEditorConfig {\n  editable?: boolean;\n  spellcheck?: boolean;\n  height?: 'auto' | string;\n  minHeight?: '0' | string;\n  maxHeight?: 'auto' | string;\n  width?: 'auto' | string;\n  minWidth?: '0' | string;\n  translate?: 'yes' | 'now' | string;\n  enableToolbar?: boolean;\n  showToolbar?: boolean;\n  placeholder?: string;\n  defaultParagraphSeparator?: string;\n  defaultFontName?: string;\n  defaultFontSize?: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | string;\n  uploadUrl?: string;\n  fonts?: Font[];\n  customClasses?: CustomClass[];\n  sanitize?: boolean;\n  toolbarPosition?: 'top' | 'bottom';\n  outline?: boolean;\n}\n\nexport const angularEditorConfig: AngularEditorConfig = {\n  editable: true,\n  spellcheck: true,\n  height: 'auto',\n  minHeight: '0',\n  maxHeight: 'auto',\n  width: 'auto',\n  minWidth: '0',\n  translate: 'yes',\n  enableToolbar: true,\n  showToolbar: true,\n  placeholder: 'Enter text here...',\n  defaultParagraphSeparator: '',\n  defaultFontName: '',\n  defaultFontSize: '',\n  fonts: [\n    {class: 'arial', name: 'Arial'},\n    {class: 'times-new-roman', name: 'Times New Roman'},\n    {class: 'calibri', name: 'Calibri'},\n    {class: 'comic-sans-ms', name: 'Comic Sans MS'}\n  ],\n  uploadUrl: 'v1/image',\n  sanitize: true,\n  toolbarPosition: 'top',\n  outline: true,\n};\n","import {Component, ElementRef, EventEmitter, Inject, Input, Output, Renderer2, ViewChild} from '@angular/core';\nimport {AngularEditorService} from './angular-editor.service';\nimport {HttpResponse} from '@angular/common/http';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass} from './config';\nimport {SelectOption} from './ae-select/ae-select.component';\n\n@Component({\n  selector: 'angular-editor-toolbar',\n  templateUrl: './angular-editor-toolbar.component.html',\n  styleUrls: ['./angular-editor-toolbar.component.scss']\n})\n\nexport class AngularEditorToolbarComponent {\n  htmlMode = false;\n  linkSelected = false;\n  block = 'default';\n  fontName = 'Times New Roman';\n  fontSize = '3';\n  foreColour;\n  backColor;\n\n  headings: SelectOption[] = [\n    {\n      label: 'Heading 1',\n      value: 'h1',\n    },\n    {\n      label: 'Heading 2',\n      value: 'h2',\n    },\n    {\n      label: 'Paragraph',\n      value: 'p',\n    },\n    {\n      label: 'Predefined',\n      value: 'pre'\n    },\n    {\n      label: 'Standard',\n      value: 'div'\n    },\n    {\n      label: 'default',\n      value: 'default'\n    }\n  ];\n\n  // fonts: SelectOption[] = [{label: '', value: ''}];\n  fontSizes: SelectOption[] = [\n    {\n      label: '1',\n      value: '1',\n    },\n    {\n      label: '2',\n      value: '2',\n    },\n    {\n      label: '3',\n      value: '3',\n    },\n    {\n      label: '4',\n      value: '4',\n    },\n    {\n      label: '5',\n      value: '5',\n    },\n    {\n      label: '6',\n      value: '6',\n    },\n    {\n      label: '7',\n      value: '7',\n    }\n  ];\n\n  customClassId = '-1';\n  // tslint:disable-next-line:variable-name\n  _customClasses: CustomClass[];\n  customClassList: SelectOption[] = [{label: '', value: ''}];\n  // uploadUrl: string;\n\n  tagMap = {\n    BLOCKQUOTE: 'indent',\n    A: 'link'\n  };\n\n  select = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'PRE', 'DIV'];\n\n  // buttons = ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'justifyLeft', 'justifyCenter',\n  //   'justifyRight', 'justifyFull', 'indent', 'outdent', 'insertUnorderedList', 'insertOrderedList', 'link'];\n\n  buttons = ['bold', 'italic', 'underline', 'subscript', 'superscript', 'justifyLeft', 'justifyCenter',\n    'justifyRight', 'justifyFull', 'indent', 'outdent', 'insertUnorderedList', 'insertOrderedList', 'link'];\n\n  @Input() id: string;\n  @Input() uploadUrl: string;\n  @Input() showToolbar: boolean;\n  @Input() fonts: SelectOption[] = [{label: '', value: ''}];\n\n  @Input()\n  set customClasses(classes: CustomClass[]) {\n    if (classes) {\n      this._customClasses = classes;\n      this.customClassList = this._customClasses.map((x, i) => ({label: x.name, value: i.toString()}));\n      this.customClassList.unshift({label: 'Clear Class', value: '-1'});\n    }\n  }\n\n  @Input()\n  set defaultFontName(value: string) {\n    if (value) {\n      this.fontName = value;\n    }\n  }\n\n  @Input()\n  set defaultFontSize(value: string) {\n    if (value) {\n      this.fontSize = value;\n    }\n  }\n\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChild('fileInput', {static: true}) myInputFile: ElementRef;\n\n  public get isLinkButtonDisabled(): boolean {\n    return this.htmlMode || !Boolean(this.editorService.selectedText);\n  }\n\n  constructor(\n    private r: Renderer2,\n    private editorService: AngularEditorService,\n    @Inject(DOCUMENT) private doc: any\n  ) {\n  }\n\n  /**\n   * Trigger command from editor header buttons\n   * @param command string from toolbar buttons\n   */\n  triggerCommand(command: string) {\n    this.execute.emit(command);\n  }\n\n  /**\n   * highlight editor buttons when cursor moved or positioning\n   */\n  triggerButtons() {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.buttons.forEach(e => {\n      const result = this.doc.queryCommandState(e);\n      const elementById = this.doc.getElementById(e + '-' + this.id);\n      if (result && elementById) {\n        this.r.addClass(elementById, 'active');\n      } else {\n        this.r.removeClass(elementById, 'active');\n      }\n    });\n  }\n\n  /**\n   * trigger highlight editor buttons when cursor moved or positioning in block\n   */\n  triggerBlocks(nodes: Node[]) {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.linkSelected = nodes.findIndex(x => x.nodeName === 'A') > -1;\n    let found = false;\n    this.select.forEach(y => {\n      const node = nodes.find(x => x.nodeName === y);\n      if (node !== undefined && y === node.nodeName) {\n        if (found === false) {\n          this.block = node.nodeName.toLowerCase();\n          found = true;\n        }\n      } else if (found === false) {\n        this.block = 'default';\n      }\n    });\n\n    found = false;\n    if (this._customClasses) {\n      this._customClasses.forEach((y, index) => {\n        const node = nodes.find(x => {\n          if (x instanceof Element) {\n            return x.className === y.class;\n          }\n        });\n        if (node !== undefined) {\n          if (found === false) {\n            this.customClassId = index.toString();\n            found = true;\n          }\n        } else if (found === false) {\n          this.customClassId = '-1';\n        }\n      });\n    }\n\n    Object.keys(this.tagMap).map(e => {\n      const elementById = this.doc.getElementById(this.tagMap[e] + '-' + this.id);\n      const node = nodes.find(x => x.nodeName === e);\n      if (node !== undefined && e === node.nodeName) {\n        this.r.addClass(elementById, 'active');\n      } else {\n        this.r.removeClass(elementById, 'active');\n      }\n    });\n\n    this.foreColour = this.doc.queryCommandValue('ForeColor');\n    this.fontSize = this.doc.queryCommandValue('FontSize');\n    this.fontName = this.doc.queryCommandValue('FontName').replace(/\"/g, '');\n    this.backColor = this.doc.queryCommandValue('backColor');\n  }\n\n  /**\n   * insert URL link\n   */\n  insertUrl() {\n    let url = 'https:\\/\\/';\n    const selection = this.editorService.savedSelection;\n    if (selection && selection.commonAncestorContainer.parentElement.nodeName === 'A') {\n      const parent = selection.commonAncestorContainer.parentElement as HTMLAnchorElement;\n      if (parent.href !== '') {\n        url = parent.href;\n      }\n    }\n    url = prompt('Insert URL link', url);\n    if (url && url !== '' && url !== 'https://') {\n      this.editorService.createLink(url);\n    }\n  }\n\n  /**\n   * insert Video link\n   */\n  insertVideo() {\n    this.execute.emit('');\n    const url = prompt('Insert Video link', `https://`);\n    if (url && url !== '' && url !== `https://`) {\n      this.editorService.insertVideo(url);\n    }\n  }\n\n  /** insert color */\n  insertColor(color: string, where: string) {\n    this.editorService.insertColor(color, where);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Name/family\n   * @param foreColor string\n   */\n  setFontName(foreColor: string): void {\n    this.editorService.setFontName(foreColor);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string): void {\n    this.editorService.setFontSize(fontSize);\n    this.execute.emit('');\n  }\n\n  /**\n   * toggle editor mode (WYSIWYG or SOURCE)\n   * @param m boolean\n   */\n  setEditorMode(m: boolean) {\n    const toggleEditorModeButton = this.doc.getElementById('toggleEditorMode' + '-' + this.id);\n    if (m) {\n      this.r.addClass(toggleEditorModeButton, 'active');\n    } else {\n      this.r.removeClass(toggleEditorModeButton, 'active');\n    }\n    this.htmlMode = m;\n  }\n\n  /**\n   * Upload image when file is selected\n   */\n  onFileChanged(event) {\n    const file = event.target.files[0];\n    if (file.type.includes('image/')) {\n        if (this.uploadUrl) {\n            this.editorService.uploadImage(file).subscribe(e => {\n              if (e instanceof HttpResponse) {\n                this.editorService.insertImage(e.body.imageUrl);\n                this.fileReset();\n              }\n            });\n        } else {\n          const reader = new FileReader();\n          reader.onload = (e: ProgressEvent) => {\n            const fr = e.currentTarget as FileReader;\n            this.editorService.insertImage(fr.result.toString());\n          };\n          reader.readAsDataURL(file);\n        }\n      }\n  }\n\n  /**\n   * Reset Input\n   */\n  fileReset() {\n    this.myInputFile.nativeElement.value = '';\n  }\n\n  /**\n   * Set custom class\n   */\n  setCustomClass(classId: string) {\n    if (classId === '-1') {\n      this.execute.emit('clear');\n    } else {\n      this.editorService.createCustomClass(this._customClasses[+classId]);\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  SecurityContext,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {AngularEditorConfig, angularEditorConfig} from './config';\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\nimport {AngularEditorService} from './angular-editor.service';\nimport {DOCUMENT} from '@angular/common';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {isDefined} from './utils';\n\n@Component({\n  selector: 'angular-editor',\n  templateUrl: './angular-editor.component.html',\n  styleUrls: ['./angular-editor.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AngularEditorComponent),\n      multi: true\n    }\n  ]\n})\nexport class AngularEditorComponent implements OnInit, ControlValueAccessor, AfterViewInit, OnDestroy {\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n\n  modeVisual = true;\n  showPlaceholder = false;\n  disabled = false;\n  focused = false;\n  touched = false;\n  changed = false;\n\n  focusInstance: any;\n  blurInstance: any;\n\n  @Input() id = '';\n  @Input() config: AngularEditorConfig = angularEditorConfig;\n  @Input() placeholder = '';\n  @Input() tabIndex: number | null;\n\n  @Output() html;\n\n  @ViewChild('editor', {static: true}) textArea: ElementRef;\n  @ViewChild('editorWrapper', {static: true}) editorWrapper: ElementRef;\n  @ViewChild('editorToolbar', {static: false}) editorToolbar: AngularEditorToolbarComponent;\n\n  @Output() viewMode = new EventEmitter<boolean>();\n\n  /** emits `blur` event when focused out from the textarea */\n    // tslint:disable-next-line:no-output-native no-output-rename\n  @Output('blur') blurEvent: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n  /** emits `focus` event when focused in to the textarea */\n    // tslint:disable-next-line:no-output-rename no-output-native\n  @Output('focus') focusEvent: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n  @HostBinding('attr.tabindex') tabindex = -1;\n\n  @HostListener('focus')\n  onFocus() {\n    this.focus();\n  }\n\n  constructor(\n    private r: Renderer2,\n    private editorService: AngularEditorService,\n    @Inject(DOCUMENT) private doc: any,\n    private sanitizer: DomSanitizer,\n    private cdRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string,\n    @Attribute('autofocus') private autoFocus: any\n  ) {\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnInit() {\n    this.config.toolbarPosition = this.config.toolbarPosition ? this.config.toolbarPosition : angularEditorConfig.toolbarPosition;\n  }\n\n  ngAfterViewInit() {\n    // Replace normal Paste with Paste Plain Text to simplify UX --JCN\n    this.textArea.nativeElement.addEventListener('paste', this.plainPaste.bind(this));\n\n    if (isDefined(this.autoFocus)) {\n      this.focus();\n    }\n  }\n\n  plainPaste(e: any) {\n    console.log();\n    e.preventDefault();\n    let text = '';\n\n    if (e.clipboardData && e.clipboardData.getData) {\n      text = e.clipboardData.getData('text/plain');\n      this.doc.execCommand('insertHTML', false, text);\n    } else if (this.doc.defaultView.clipboardData && this.doc.defaultView.clipboardData.getData) {\n      text = this.doc.defaultView.clipboardData.getData('Text');\n      if (this.doc.defaultView.getSelection) {\n        const sel = this.doc.defaultView.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n          const range = sel.getRangeAt(0);\n          range.deleteContents();\n          range.insertNode(this.doc.createTextNode(text));\n        }\n      } else if (this.doc.selection && this.doc.selection.createRange) {\n        this.doc.selection.createRange().text = text;\n      }\n    }\n  }\n\n  doInsertHTML(name: string) {\n    this.editorService.executeCommand('insertHTML', name);\n  }\n\n  /**\n   * Executed command from editor header buttons\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    this.focus();\n    if (command === 'toggleEditorMode') {\n      this.toggleEditorMode(this.modeVisual);\n    } else if (command !== '') {\n      if (command === 'clear') {\n        this.editorService.removeSelectedElements(this.getCustomTags());\n        this.onContentChange(this.textArea.nativeElement.innerHTML);\n      } else if (command === 'default') {\n        this.editorService.removeSelectedElements('h1,h2,h3,h4,h5,h6,p,pre');\n        this.onContentChange(this.textArea.nativeElement.innerHTML);\n      } else {\n        this.editorService.executeCommand(command);\n      }\n      this.exec();\n    }\n  }\n\n  /**\n   * focus event\n   */\n  onTextAreaFocus(event: FocusEvent): void {\n    // this.focusEvent.emit(event);  // Hack: I think I need this --JCN\n    if (this.focused) {\n      event.stopPropagation();\n      return;\n    }\n    this.focused = true;\n    // console.log(`onTextAreaFocus() setting focused to ${this.focused} for id ${this.id}`);\n    this.focusEvent.emit(event);\n    if (!this.touched || !this.changed) {\n      this.editorService.executeInNextQueueIteration(() => {\n        this.configure();\n        this.touched = true;\n      });\n    }\n  }\n\n  /**\n   * @description fires when cursor leaves textarea\n   */\n  public onTextAreaMouseLeave(event: MouseEvent): void {\n    this.editorService.saveSelection();\n  }\n\n  /**\n   * blur event\n   */\n  onTextAreaBlur(event: FocusEvent) {\n    /**\n     * save selection if focussed out\n     */\n    // this.editorService.executeInNextQueueIteration(this.editorService.saveSelection);\n    // Changing from async to sync here seemed to fix an \"unfocused\" problem\n    this.editorService.saveSelection();\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n\n    if (event.relatedTarget !== null) {\n      const parent = (event.relatedTarget as HTMLElement).parentElement;\n      if (!parent.classList.contains('angular-editor-toolbar-set') && !parent.classList.contains('ae-picker')) {\n        this.blurEvent.emit(event);\n        this.focused = false;\n        // console.log(`onTextAreaBlur() setting focused to ${this.focused} for id ${this.id}`);\n      }\n    } else {  // Added by JCN (user clicked on random surface somewhere)\n      this.blurEvent.emit(event);\n      this.focused = false;\n      // console.log(`onTextAreaBlur() setting focused to ${this.focused} for id ${this.id} (related target null)`);\n    }\n  }\n\n  /**\n   *  focus the text area when the editor is focused\n   */\n  focus() {\n    if (this.modeVisual) {\n      this.textArea.nativeElement.focus();\n    } else {\n      const sourceText = this.doc.getElementById('sourceText' + this.id);\n      sourceText.focus();\n      this.focused = true;\n      // console.log(`focus() setting focused to ${this.focused} for id ${this.id}`);\n    }\n  }\n\n  /**\n   * Executed from the contenteditable section while the input property changes\n   * @param html html string from contenteditable\n   */\n  onContentChange(html: string): void {\n    if ((!html || html === '<br>')) {\n      html = '';\n    }\n    if (typeof this.onChange === 'function') {\n      this.onChange(this.config.sanitize || this.config.sanitize === undefined ?\n        this.sanitizer.sanitize(SecurityContext.HTML, html) : html);\n      if ((!html) !== this.showPlaceholder) {\n        this.togglePlaceholder(this.showPlaceholder);\n      }\n    }\n    this.changed = true;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a change event.\n   *\n   * @param fn a function\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = e => (e === '<br>' ? fn('') : fn(e)) ;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a touch event.\n   *\n   * @param fn a function\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Write a new value to the element.\n   *\n   * @param value value to be executed when there is a change in contenteditable\n   */\n  writeValue(value: any): void {\n\n    if ((!value || value === '<br>' || value === '') !== this.showPlaceholder) {\n      this.togglePlaceholder(this.showPlaceholder);\n    }\n\n    if (value === undefined || value === '' || value === '<br>') {\n      value = null;\n    }\n\n    this.refreshView(value);\n  }\n\n  /**\n   * refresh view/HTML of the editor\n   *\n   * @param value html string from the editor\n   */\n  refreshView(value: string): void {\n    const normalizedValue = value === null ? '' : value;\n    this.r.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n\n    return;\n  }\n\n  /**\n   * toggles placeholder based on input string\n   *\n   * @param value A HTML string from the editor\n   */\n  togglePlaceholder(value: boolean): void {\n    if (!value) {\n      this.r.addClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = true;\n\n    } else {\n      this.r.removeClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = false;\n    }\n  }\n\n  /**\n   * Implements disabled state for this element\n   *\n   * @param isDisabled Disabled flag\n   */\n  setDisabledState(isDisabled: boolean): void {\n    const div = this.textArea.nativeElement;\n    const action = isDisabled ? 'addClass' : 'removeClass';\n    this.r[action](div, 'disabled');\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * toggles editor mode based on bToSource bool\n   *\n   * @param bToSource A boolean value from the editor\n   */\n  toggleEditorMode(bToSource: boolean) {\n    let oContent: any;\n    const editableElement = this.textArea.nativeElement;\n\n    if (bToSource) {\n      oContent = this.r.createText(editableElement.innerHTML);\n      this.r.setProperty(editableElement, 'innerHTML', '');\n      this.r.setProperty(editableElement, 'contentEditable', false);\n\n      const oPre = this.r.createElement('pre');\n      this.r.setStyle(oPre, 'margin', '0');\n      this.r.setStyle(oPre, 'outline', 'none');\n\n      const oCode = this.r.createElement('code');\n      this.r.setProperty(oCode, 'id', 'sourceText' + this.id);\n      this.r.setStyle(oCode, 'display', 'block');\n      this.r.setStyle(oCode, 'white-space', 'pre-wrap');\n      this.r.setStyle(oCode, 'word-break', 'keep-all');\n      this.r.setStyle(oCode, 'outline', 'none');\n      this.r.setStyle(oCode, 'margin', '0');\n      this.r.setStyle(oCode, 'background-color', '#fff5b9');\n      this.r.setProperty(oCode, 'contentEditable', true);\n      this.r.appendChild(oCode, oContent);\n      this.focusInstance = this.r.listen(oCode, 'focus', (event) => this.onTextAreaFocus(event));\n      this.blurInstance = this.r.listen(oCode, 'blur', (event) => this.onTextAreaBlur(event));\n      this.r.appendChild(oPre, oCode);\n      this.r.appendChild(editableElement, oPre);\n\n      // ToDo move to service\n\n      // paragraph seems better --JN\n      this.doc.execCommand('defaultParagraphSeparator', false, 'p');\n      // this.doc.execCommand('defaultParagraphSeparator', false, 'div');\n\n      this.modeVisual = false;\n      this.viewMode.emit(false);\n      oCode.focus();\n    } else {\n      if (this.doc.querySelectorAll) {\n        this.r.setProperty(editableElement, 'innerHTML', editableElement.innerText);\n      } else {\n        oContent = this.doc.createRange();\n        oContent.selectNodeContents(editableElement.firstChild);\n        this.r.setProperty(editableElement, 'innerHTML', oContent.toString());\n      }\n      this.r.setProperty(editableElement, 'contentEditable', true);\n      this.modeVisual = true;\n      this.viewMode.emit(true);\n      this.onContentChange(editableElement.innerHTML);\n      editableElement.focus();\n    }\n    this.editorToolbar.setEditorMode(!this.modeVisual);\n  }\n\n  /**\n   * toggles editor buttons when cursor moved or positioning\n   *\n   * Send a node array from the contentEditable of the editor\n   */\n  exec() {\n    this.editorToolbar.triggerButtons();\n\n    let userSelection;\n    if (this.doc.getSelection) {\n      userSelection = this.doc.getSelection();\n      this.editorService.executeInNextQueueIteration(this.editorService.saveSelection);\n    }\n\n    let a = userSelection.focusNode;\n    const els = [];\n    while (a && a.id !== 'editor') {\n      els.unshift(a);\n      a = a.parentNode;\n    }\n    this.editorToolbar.triggerBlocks(els);\n  }\n\n  private configure() {\n    this.editorService.uploadUrl = this.config.uploadUrl;\n    if (this.config.defaultParagraphSeparator) {\n      this.editorService.setDefaultParagraphSeparator(this.config.defaultParagraphSeparator);\n    }\n    if (this.config.defaultFontName) {\n      this.editorService.setFontName(this.config.defaultFontName);\n    }\n    if (this.config.defaultFontSize) {\n      this.editorService.setFontSize(this.config.defaultFontSize);\n    }\n  }\n\n  getFonts() {\n    const fonts = this.config.fonts ? this.config.fonts : angularEditorConfig.fonts;\n    return fonts.map(x => {\n      return {label: x.name, value: x.name};\n    });\n  }\n\n  getCustomTags() {\n    const tags = ['span'];\n    this.config.customClasses.forEach(x => {\n      if (x.tag !== undefined) {\n        if (!tags.includes(x.tag)) {\n          tags.push(x.tag);\n        }\n      }\n    });\n    return tags.join(',');\n  }\n\n  ngOnDestroy() {\n    if (this.blurInstance) {\n      this.blurInstance();\n    }\n    if (this.focusInstance) {\n      this.focusInstance();\n    }\n  }\n}\n","export function isDefined(value: any) {\n  return value !== undefined && value !== null;\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  Renderer2, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nexport interface SelectOption {\n  label: string;\n  value: string;\n}\n\n@Component({\n  selector: 'ae-select',\n  templateUrl: './ae-select.component.html',\n  styleUrls: ['./ae-select.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AeSelectComponent),\n      multi: true,\n    }\n  ]\n})\nexport class AeSelectComponent implements OnInit, ControlValueAccessor {\n  @Input() options: SelectOption[] = [];\n\n  selectedOption: SelectOption;\n  disabled = false;\n  optionId = 0;\n\n  get label(): string {\n    return this.selectedOption && this.selectedOption.hasOwnProperty('label') ? this.selectedOption.label : 'Select';\n  }\n\n  opened = false;\n\n  get value(): string {\n    return this.selectedOption.value;\n  }\n\n  /*@HostBinding('class') get getClass() {\n    return 'ae-select';\n  }*/\n\n  // tslint:disable-next-line:no-output-native no-output-rename\n  @Output('change') changeEvent = new EventEmitter();\n\n  @ViewChild('labelButton', {static: true}) labelButton: ElementRef;\n\n  constructor(private elRef: ElementRef, private r: Renderer2) { }\n\n  ngOnInit() {\n    this.selectedOption = this.options[0];\n  }\n\n  optionSelect(option: SelectOption, event: MouseEvent) {\n    event.stopPropagation();\n    this.setValue(option.value);\n    this.onChange(this.selectedOption.value);\n    this.changeEvent.emit(this.selectedOption.value);\n    this.onTouched();\n    this.opened = false;\n  }\n\n  toggleOpen(event: MouseEvent) {\n    // event.stopPropagation();\n    if (this.disabled) {\n      return;\n    }\n    this.opened = !this.opened;\n  }\n\n  @HostListener('document:click', ['$event'])\n    onClick($event: MouseEvent) {\n      if (!this.elRef.nativeElement.contains($event.target)) {\n        this.close();\n      }\n  }\n\n\n  close() {\n    this.opened = false;\n  }\n\n  get isOpen(): boolean {\n    return this.opened;\n  }\n\n  writeValue(value) {\n    if (!value || typeof value !== 'string') {\n      return;\n    }\n    this.setValue(value);\n  }\n\n  setValue(value) {\n    let index = 0;\n    const selectedEl = this.options.find((el, i) => {\n      index = i;\n      return el.value === value;\n    });\n    if (selectedEl) {\n      this.selectedOption = selectedEl;\n      this.optionId = index;\n    }\n  }\n\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.labelButton.nativeElement.disabled = isDisabled;\n    const div = this.labelButton.nativeElement;\n    const action = isDisabled ? 'addClass' : 'removeClass';\n    this.r[action](div, 'disabled');\n    this.disabled = isDisabled;\n  }\n\n  @HostListener('keydown', ['$event'])\n  handleKeyDown($event: KeyboardEvent) {\n    if (!this.opened) {\n      return;\n    }\n    // console.log($event.key);\n    // if (KeyCode[$event.key]) {\n    switch ($event.key) {\n        case 'ArrowDown':\n          this._handleArrowDown($event);\n          break;\n        case 'ArrowUp':\n          this._handleArrowUp($event);\n          break;\n        case 'Space':\n          this._handleSpace($event);\n          break;\n        case 'Enter':\n          this._handleEnter($event);\n          break;\n        case 'Tab':\n          this._handleTab($event);\n          break;\n        case 'Escape':\n          this.close();\n          $event.preventDefault();\n          break;\n        case 'Backspace':\n          this._handleBackspace();\n          break;\n      }\n    // } else if ($event.key && $event.key.length === 1) {\n      // this._keyPress$.next($event.key.toLocaleLowerCase());\n   // }\n  }\n\n  _handleArrowDown($event) {\n    if (this.optionId < this.options.length - 1) {\n      this.optionId++;\n    }\n  }\n\n  _handleArrowUp($event) {\n    if (this.optionId >= 1) {\n      this.optionId--;\n    }\n  }\n\n  _handleSpace($event) {\n\n  }\n\n  _handleEnter($event) {\n    this.optionSelect(this.options[this.optionId], $event);\n  }\n\n  _handleTab($event) {\n\n  }\n\n  _handleBackspace() {\n\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {AngularEditorComponent} from './angular-editor.component';\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport { AeSelectComponent } from './ae-select/ae-select.component';\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, ReactiveFormsModule\n  ],\n  declarations: [AngularEditorComponent, AngularEditorToolbarComponent, AeSelectComponent],\n  exports: [AngularEditorComponent, AngularEditorToolbarComponent]\n})\nexport class AngularEditorModule {\n}\n"]}